service: serverless-app

# plugins:
#   - serverless-openapi-documentation
#   - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  profile: alvaro
  environment:
    STAR_WARS_TABLE: StarWarsEntitiesTable
    COUNTER_TABLE: CounterStarWarsEntitiesTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - !GetAtt StarWarsEntitiesTable.Arn
        - !GetAtt CounterStarWarsEntitiesTable.Arn
        - !Join 
            - ""
            - - !GetAtt StarWarsEntitiesTable.Arn
              - "/index/EntidadIndex" 

custom:
  documentation:
    api:
      info:
        title: My API
        version: '1.0.0'
        description: API documentation for my serverless application.
      paths:
        /new/films:
          get:
            summary: Get all custom new films
            description: Retrieve a list of custom new films.
            responses:
              '200':
                description: Successful response
          post:
            summary: Create a custom new film
            description: Create a custom new film.
            responses:
              '201':
                description: Film created successfully
        /new/films/{id}:
          get:
            summary: Get a custom new film by its id
            description: Retrieve a custom new film by its id.
            responses:
              '200':
                description: Successful response
          put:
            summary: Update a custom new film
            description: Update a custom new film.
            responses:
              '200':
                description: Successful response
          delete:
            summary: Delete a custom new film
            description: Delete a custom new film.
            responses:
              '204':
                description: Film deleted successfully
        /old/films:
          get:
            summary: Get all films from original swapi
            description: Get all films from original swapi.
            responses:
              '200':
                description: Successful response
        /old/films/{id}:
          get:
            summary: Get a film from original swapi by its id
            description: Get a film from original swapi by its id.
            responses:
              '200':
                description: Successful response
        /old/people:
          get:
            summary: Get all people from original swapi
            description: Get all people from original swapi.
            responses:
              '200':
                description: Successful response
        /old/people/{id}:
          get:
            summary: Get people from original swapi by its id
            description: Get people from original swapi by its id.
            responses:
              '200':
                description: Successful response

functions:
  # NEW DATA:
  GetNewFilmsFunction:
    name: GetNewFilmsFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /new/films
          method: get
  GetNewFilmByIdFunction:
    name: GetNewFilmByIdFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /new/films/{id}
          method: get
  CreateNewFilmFunction:
    name: CreateNewFilmFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /new/films
          method: post
  UpdateNewFilmFunction:
    name: UpdateNewFilmFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /new/films/{id}
          method: put
  DeleteNewFilmFunction:
    name: DeleteNewFilmFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /new/films/{id}
          method: delete
  
  # OLD DATA:
  GetOldFilmsFunction:
    name: GetOldFilmsFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /old/films
          method: get
  GetOldFilmsByIdFunction:
    name: GetOldFilmsByIdFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /old/films/{id}
          method: get
  
  GetOldPeopleFunction:
    name: GetOldPeopleFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /old/people
          method: get
  GetOldPeopleByIdFunction:
    name: GetOldPeopleByIdFunction
    handler: dist/main.handler
    timeout: 30
    events:
      - httpApi:
          path: /old/people/{id}
          method: get

resources:
  Resources:
    StarWarsEntitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: StarWarsEntitiesTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: entidad
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: entidad
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: EntidadIndex
            KeySchema:
              - AttributeName: entidad
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    CounterStarWarsEntitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "CounterStarWarsEntitiesTable"
        AttributeDefinitions:
          - AttributeName: entidad
            AttributeType: S
        KeySchema:
          - AttributeName: entidad
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST