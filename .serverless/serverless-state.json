{
  "service": {
    "service": "serverless-app",
    "serviceObject": {
      "name": "serverless-app"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "profile": "alvaro",
      "environment": {
        "STAR_WARS_TABLE": "StarWarsEntitiesTable",
        "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "StarWarsEntitiesTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "CounterStarWarsEntitiesTable",
                "Arn"
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "StarWarsEntitiesTable",
                      "Arn"
                    ]
                  },
                  "/index/EntidadIndex"
                ]
              ]
            }
          ]
        }
      ],
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetNewFilmsFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetNewFilmsFunction"
            }
          },
          "GetNewFilmByIdFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetNewFilmByIdFunction"
            }
          },
          "CreateNewFilmFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/CreateNewFilmFunction"
            }
          },
          "UpdateNewFilmFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/UpdateNewFilmFunction"
            }
          },
          "DeleteNewFilmFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/DeleteNewFilmFunction"
            }
          },
          "GetNewPeopleFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetNewPeopleFunction"
            }
          },
          "GetNewPeopleByIdFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetNewPeopleByIdFunction"
            }
          },
          "CreateNewPeopleFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/CreateNewPeopleFunction"
            }
          },
          "UpdateNewPeopleFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/UpdateNewPeopleFunction"
            }
          },
          "DeleteNewPeopleFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/DeleteNewPeopleFunction"
            }
          },
          "GetOldFilmsFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetOldFilmsFunction"
            }
          },
          "GetOldFilmsByIdFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetOldFilmsByIdFunction"
            }
          },
          "GetOldPeopleFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetOldPeopleFunction"
            }
          },
          "GetOldPeopleByIdFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetOldPeopleByIdFunction"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-app",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmsFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmByIdFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewFilmFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewFilmFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewFilmFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleByIdFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewPeopleFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewPeopleFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewPeopleFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsByIdFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleFunction:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleByIdFunction:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmsFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmByIdFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewFilmFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewFilmFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewFilmFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleByIdFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewPeopleFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewPeopleFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewPeopleFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsByIdFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleFunction:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleByIdFunction:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-app",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetNewFilmsFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetNewFilmsFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetNewFilmsFunctionLogGroup"
            ]
          },
          "GetNewFilmByIdFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetNewFilmByIdFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetNewFilmByIdFunctionLogGroup"
            ]
          },
          "CreateNewFilmFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "CreateNewFilmFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateNewFilmFunctionLogGroup"
            ]
          },
          "UpdateNewFilmFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "UpdateNewFilmFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateNewFilmFunctionLogGroup"
            ]
          },
          "DeleteNewFilmFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "DeleteNewFilmFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteNewFilmFunctionLogGroup"
            ]
          },
          "GetNewPeopleFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetNewPeopleFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetNewPeopleFunctionLogGroup"
            ]
          },
          "GetNewPeopleByIdFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetNewPeopleByIdFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetNewPeopleByIdFunctionLogGroup"
            ]
          },
          "CreateNewPeopleFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "CreateNewPeopleFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateNewPeopleFunctionLogGroup"
            ]
          },
          "UpdateNewPeopleFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "UpdateNewPeopleFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateNewPeopleFunctionLogGroup"
            ]
          },
          "DeleteNewPeopleFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "DeleteNewPeopleFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteNewPeopleFunctionLogGroup"
            ]
          },
          "GetOldFilmsFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetOldFilmsFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOldFilmsFunctionLogGroup"
            ]
          },
          "GetOldFilmsByIdFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetOldFilmsByIdFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOldFilmsByIdFunctionLogGroup"
            ]
          },
          "GetOldPeopleFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetOldPeopleFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOldPeopleFunctionLogGroup"
            ]
          },
          "GetOldPeopleByIdFunctionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                "S3Key": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z/serverless-app.zip"
              },
              "Handler": "dist/main.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "GetOldPeopleByIdFunction",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                  "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOldPeopleByIdFunctionLogGroup"
            ]
          },
          "GetNewFilmsFunctionLambdaVersion531OsGRTCmMeBypHhOnwZl2JSnMJiiIOQH0gDI5Lhk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNewFilmsFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetNewFilmByIdFunctionLambdaVersion2y7Pm6G1663w86zUJlJWaOIVyH2JWf0ULjQGmMMM9vo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNewFilmByIdFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "CreateNewFilmFunctionLambdaVersionM40zTTDAdJ7NxgLcl6j2cLu40NdBaRUo5Cco": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateNewFilmFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "UpdateNewFilmFunctionLambdaVersionjqqeXsMVih1cHxqtTVsMknszbcsnBpbxJKVp8Mwio": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateNewFilmFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "DeleteNewFilmFunctionLambdaVersionPVi1ohUNkzt4Xsl2rTt3HuCIVvPjGahQqIDc5DeH0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteNewFilmFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetNewPeopleFunctionLambdaVersionr0pai0LUPbBWAaRlRqPqMKQT0Mg8ZxtATdTvkCIttVs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNewPeopleFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetNewPeopleByIdFunctionLambdaVersioncnJtcxc6XoIpGqhmwF1sAUXbtm4h9GuhgYtbyE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNewPeopleByIdFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "CreateNewPeopleFunctionLambdaVersion03Jwbu21uuKIQ0DlKqWfZx2QqAWJEHaGGn5db1zGo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateNewPeopleFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "UpdateNewPeopleFunctionLambdaVersionR53PaL36yTtrUHpGIOrQ6D4o2K5qlDWm2vRbTYKxU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateNewPeopleFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "DeleteNewPeopleFunctionLambdaVersionNVBmZy6r1PDcprgD0XfqC3xUqZngdt3oT2D31LPHPFA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteNewPeopleFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetOldFilmsFunctionLambdaVersioneCkcmaM4utHC7NehL6QIElCxmTNnQ5idFdx0dgQAY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOldFilmsFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetOldFilmsByIdFunctionLambdaVersionEZnixxFOr4VArNhfc66ozOXNSsi8Q4pbd7Q6LjWuxg0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOldFilmsByIdFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetOldPeopleFunctionLambdaVersionKF4UJihV2jkgWmxEGpr4fuBsZRztbCYuDoOnf0ojk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOldPeopleFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "GetOldPeopleByIdFunctionLambdaVersionoEtKTRa2Og11IRvOOdoG3aW3eAsLBZVpjVr2Qvd8U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOldPeopleByIdFunctionLambdaFunction"
              },
              "CodeSha256": "MW9RgEZMgotn0hqGw7pD1Vz3R9UmUQLiLWSjghCUAKM="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-serverless-app",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "GetNewFilmsFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNewFilmsFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetNewFilmsFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetNewFilmsFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetNewFilms": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /new/films",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetNewFilmsFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetNewFilmsFunction"
          },
          "GetNewFilmByIdFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNewFilmByIdFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetNewFilmByIdFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetNewFilmByIdFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetNewFilmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /new/films/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetNewFilmByIdFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetNewFilmByIdFunction"
          },
          "CreateNewFilmFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateNewFilmFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateNewFilmFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateNewFilmFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostNewFilms": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /new/films",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateNewFilmFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateNewFilmFunction"
          },
          "UpdateNewFilmFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateNewFilmFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateNewFilmFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateNewFilmFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutNewFilmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /new/films/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateNewFilmFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateNewFilmFunction"
          },
          "DeleteNewFilmFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteNewFilmFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteNewFilmFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteNewFilmFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteNewFilmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /new/films/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteNewFilmFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteNewFilmFunction"
          },
          "GetNewPeopleFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNewPeopleFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetNewPeopleFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetNewPeopleFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetNewPeople": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /new/people",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetNewPeopleFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetNewPeopleFunction"
          },
          "GetNewPeopleByIdFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNewPeopleByIdFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetNewPeopleByIdFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetNewPeopleByIdFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetNewPeopleIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /new/people/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetNewPeopleByIdFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetNewPeopleByIdFunction"
          },
          "CreateNewPeopleFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateNewPeopleFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateNewPeopleFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateNewPeopleFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostNewPeople": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /new/people",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateNewPeopleFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateNewPeopleFunction"
          },
          "UpdateNewPeopleFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateNewPeopleFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateNewPeopleFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateNewPeopleFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutNewPeopleIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /new/people/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateNewPeopleFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateNewPeopleFunction"
          },
          "DeleteNewPeopleFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteNewPeopleFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteNewPeopleFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteNewPeopleFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteNewPeopleIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /new/people/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteNewPeopleFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteNewPeopleFunction"
          },
          "GetOldFilmsFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOldFilmsFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOldFilmsFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOldFilmsFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetOldFilms": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /old/films",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOldFilmsFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOldFilmsFunction"
          },
          "GetOldFilmsByIdFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOldFilmsByIdFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOldFilmsByIdFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOldFilmsByIdFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetOldFilmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /old/films/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOldFilmsByIdFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOldFilmsByIdFunction"
          },
          "GetOldPeopleFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOldPeopleFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOldPeopleFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOldPeopleFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetOldPeople": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /old/people",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOldPeopleFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOldPeopleFunction"
          },
          "GetOldPeopleByIdFunctionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOldPeopleByIdFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOldPeopleByIdFunction": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOldPeopleByIdFunctionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetOldPeopleIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /old/people/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOldPeopleByIdFunction"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOldPeopleByIdFunction"
          },
          "StarWarsEntitiesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "StarWarsEntitiesTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "entidad",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "entidad",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EntidadIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "entidad",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "CounterStarWarsEntitiesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "CounterStarWarsEntitiesTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "entidad",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "entidad",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
            "Export": {
              "Name": "sls-serverless-app-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetNewFilmsFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNewFilmsFunctionLambdaVersion531OsGRTCmMeBypHhOnwZl2JSnMJiiIOQH0gDI5Lhk"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetNewFilmsFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetNewFilmByIdFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNewFilmByIdFunctionLambdaVersion2y7Pm6G1663w86zUJlJWaOIVyH2JWf0ULjQGmMMM9vo"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetNewFilmByIdFunctionLambdaFunctionQualifiedArn"
            }
          },
          "CreateNewFilmFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateNewFilmFunctionLambdaVersionM40zTTDAdJ7NxgLcl6j2cLu40NdBaRUo5Cco"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-CreateNewFilmFunctionLambdaFunctionQualifiedArn"
            }
          },
          "UpdateNewFilmFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateNewFilmFunctionLambdaVersionjqqeXsMVih1cHxqtTVsMknszbcsnBpbxJKVp8Mwio"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-UpdateNewFilmFunctionLambdaFunctionQualifiedArn"
            }
          },
          "DeleteNewFilmFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteNewFilmFunctionLambdaVersionPVi1ohUNkzt4Xsl2rTt3HuCIVvPjGahQqIDc5DeH0"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-DeleteNewFilmFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetNewPeopleFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNewPeopleFunctionLambdaVersionr0pai0LUPbBWAaRlRqPqMKQT0Mg8ZxtATdTvkCIttVs"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetNewPeopleFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetNewPeopleByIdFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNewPeopleByIdFunctionLambdaVersioncnJtcxc6XoIpGqhmwF1sAUXbtm4h9GuhgYtbyE"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetNewPeopleByIdFunctionLambdaFunctionQualifiedArn"
            }
          },
          "CreateNewPeopleFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateNewPeopleFunctionLambdaVersion03Jwbu21uuKIQ0DlKqWfZx2QqAWJEHaGGn5db1zGo"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-CreateNewPeopleFunctionLambdaFunctionQualifiedArn"
            }
          },
          "UpdateNewPeopleFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateNewPeopleFunctionLambdaVersionR53PaL36yTtrUHpGIOrQ6D4o2K5qlDWm2vRbTYKxU"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-UpdateNewPeopleFunctionLambdaFunctionQualifiedArn"
            }
          },
          "DeleteNewPeopleFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteNewPeopleFunctionLambdaVersionNVBmZy6r1PDcprgD0XfqC3xUqZngdt3oT2D31LPHPFA"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-DeleteNewPeopleFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetOldFilmsFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOldFilmsFunctionLambdaVersioneCkcmaM4utHC7NehL6QIElCxmTNnQ5idFdx0dgQAY"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetOldFilmsFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOldFilmsByIdFunctionLambdaVersionEZnixxFOr4VArNhfc66ozOXNSsi8Q4pbd7Q6LjWuxg0"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetOldPeopleFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOldPeopleFunctionLambdaVersionKF4UJihV2jkgWmxEGpr4fuBsZRztbCYuDoOnf0ojk"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetOldPeopleFunctionLambdaFunctionQualifiedArn"
            }
          },
          "GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOldPeopleByIdFunctionLambdaVersionoEtKTRa2Og11IRvOOdoG3aW3eAsLBZVpjVr2Qvd8U"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-serverless-app-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-serverless-app-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "api": {
          "info": {
            "title": "My API",
            "version": "1.0.0",
            "description": "API documentation for my serverless application."
          },
          "paths": {
            "/new/films": {
              "get": {
                "summary": "Get all custom new films",
                "description": "Retrieve a list of custom new films.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              },
              "post": {
                "summary": "Create a custom new film",
                "description": "Create a custom new film.",
                "responses": {
                  "201": {
                    "description": "Film created successfully"
                  }
                }
              }
            },
            "/new/films/{id}": {
              "get": {
                "summary": "Get a custom new film by its id",
                "description": "Retrieve a custom new film by its id.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              },
              "put": {
                "summary": "Update a custom new film",
                "description": "Update a custom new film.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              },
              "delete": {
                "summary": "Delete a custom new film",
                "description": "Delete a custom new film.",
                "responses": {
                  "204": {
                    "description": "Film deleted successfully"
                  }
                }
              }
            },
            "/old/films": {
              "get": {
                "summary": "Get all films from original swapi",
                "description": "Get all films from original swapi.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              }
            },
            "/old/films/{id}": {
              "get": {
                "summary": "Get a film from original swapi by its id",
                "description": "Get a film from original swapi by its id.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              }
            },
            "/old/people": {
              "get": {
                "summary": "Get all people from original swapi",
                "description": "Get all people from original swapi.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              }
            },
            "/old/people/{id}": {
              "get": {
                "summary": "Get people from original swapi by its id",
                "description": "Get people from original swapi by its id.",
                "responses": {
                  "200": {
                    "description": "Successful response"
                  }
                }
              }
            }
          }
        }
      }
    },
    "pluginsData": {},
    "functions": {
      "GetNewFilmsFunction": {
        "name": "GetNewFilmsFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/films",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/new/films"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetNewFilmsFunctionLambdaVersion531OsGRTCmMeBypHhOnwZl2JSnMJiiIOQH0gDI5Lhk"
      },
      "GetNewFilmByIdFunction": {
        "name": "GetNewFilmByIdFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/films/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/new/films/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetNewFilmByIdFunctionLambdaVersion2y7Pm6G1663w86zUJlJWaOIVyH2JWf0ULjQGmMMM9vo"
      },
      "CreateNewFilmFunction": {
        "name": "CreateNewFilmFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/films",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/new/films"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateNewFilmFunctionLambdaVersionM40zTTDAdJ7NxgLcl6j2cLu40NdBaRUo5Cco"
      },
      "UpdateNewFilmFunction": {
        "name": "UpdateNewFilmFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/films/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/new/films/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateNewFilmFunctionLambdaVersionjqqeXsMVih1cHxqtTVsMknszbcsnBpbxJKVp8Mwio"
      },
      "DeleteNewFilmFunction": {
        "name": "DeleteNewFilmFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/films/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/new/films/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteNewFilmFunctionLambdaVersionPVi1ohUNkzt4Xsl2rTt3HuCIVvPjGahQqIDc5DeH0"
      },
      "GetNewPeopleFunction": {
        "name": "GetNewPeopleFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/people",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/new/people"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetNewPeopleFunctionLambdaVersionr0pai0LUPbBWAaRlRqPqMKQT0Mg8ZxtATdTvkCIttVs"
      },
      "GetNewPeopleByIdFunction": {
        "name": "GetNewPeopleByIdFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/people/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/new/people/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetNewPeopleByIdFunctionLambdaVersioncnJtcxc6XoIpGqhmwF1sAUXbtm4h9GuhgYtbyE"
      },
      "CreateNewPeopleFunction": {
        "name": "CreateNewPeopleFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/people",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/new/people"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateNewPeopleFunctionLambdaVersion03Jwbu21uuKIQ0DlKqWfZx2QqAWJEHaGGn5db1zGo"
      },
      "UpdateNewPeopleFunction": {
        "name": "UpdateNewPeopleFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/people/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/new/people/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateNewPeopleFunctionLambdaVersionR53PaL36yTtrUHpGIOrQ6D4o2K5qlDWm2vRbTYKxU"
      },
      "DeleteNewPeopleFunction": {
        "name": "DeleteNewPeopleFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/new/people/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/new/people/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteNewPeopleFunctionLambdaVersionNVBmZy6r1PDcprgD0XfqC3xUqZngdt3oT2D31LPHPFA"
      },
      "GetOldFilmsFunction": {
        "name": "GetOldFilmsFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/old/films",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/old/films"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetOldFilmsFunctionLambdaVersioneCkcmaM4utHC7NehL6QIElCxmTNnQ5idFdx0dgQAY"
      },
      "GetOldFilmsByIdFunction": {
        "name": "GetOldFilmsByIdFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/old/films/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/old/films/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetOldFilmsByIdFunctionLambdaVersionEZnixxFOr4VArNhfc66ozOXNSsi8Q4pbd7Q6LjWuxg0"
      },
      "GetOldPeopleFunction": {
        "name": "GetOldPeopleFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/old/people",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/old/people"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetOldPeopleFunctionLambdaVersionKF4UJihV2jkgWmxEGpr4fuBsZRztbCYuDoOnf0ojk"
      },
      "GetOldPeopleByIdFunction": {
        "name": "GetOldPeopleByIdFunction",
        "handler": "dist/main.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/old/people/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/old/people/{id}"
          }
        ],
        "package": {},
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetOldPeopleByIdFunctionLambdaVersionoEtKTRa2Og11IRvOOdoG3aW3eAsLBZVpjVr2Qvd8U"
      }
    },
    "resources": {
      "Resources": {
        "StarWarsEntitiesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "StarWarsEntitiesTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "entidad",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "entidad",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "EntidadIndex",
                "KeySchema": [
                  {
                    "AttributeName": "entidad",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "CounterStarWarsEntitiesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "CounterStarWarsEntitiesTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "entidad",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "entidad",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "serverless-app",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\AlvaroErnestoNarváez\\Desktop\\reto-tecnico\\prueba-tecnica-swapi\\.serverless\\serverless-app.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/serverless-app/dev/1729852021189-2024-10-25T10:27:01.189Z",
    "artifact": "serverless-app.zip"
  }
}