{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GetNewFilmsFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetNewFilmsFunction"
      }
    },
    "GetNewFilmByIdFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetNewFilmByIdFunction"
      }
    },
    "CreateNewFilmFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CreateNewFilmFunction"
      }
    },
    "UpdateNewFilmFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/UpdateNewFilmFunction"
      }
    },
    "DeleteNewFilmFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DeleteNewFilmFunction"
      }
    },
    "GetNewPeopleFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetNewPeopleFunction"
      }
    },
    "GetNewPeopleByIdFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetNewPeopleByIdFunction"
      }
    },
    "CreateNewPeopleFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CreateNewPeopleFunction"
      }
    },
    "UpdateNewPeopleFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/UpdateNewPeopleFunction"
      }
    },
    "DeleteNewPeopleFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/DeleteNewPeopleFunction"
      }
    },
    "GetOldFilmsFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetOldFilmsFunction"
      }
    },
    "GetOldFilmsByIdFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetOldFilmsByIdFunction"
      }
    },
    "GetOldPeopleFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetOldPeopleFunction"
      }
    },
    "GetOldPeopleByIdFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetOldPeopleByIdFunction"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-app",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmsFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmByIdFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewFilmFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewFilmFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewFilmFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleByIdFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewPeopleFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewPeopleFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewPeopleFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsByIdFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleByIdFunction:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmsFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmByIdFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewFilmFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewFilmFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewFilmFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewPeopleByIdFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewPeopleFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewPeopleFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewPeopleFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsByIdFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleByIdFunction:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "StarWarsEntitiesTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "CounterStarWarsEntitiesTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "StarWarsEntitiesTable",
                              "Arn"
                            ]
                          },
                          "/index/EntidadIndex"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-app",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetNewFilmsFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetNewFilmsFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetNewFilmsFunctionLogGroup"
      ]
    },
    "GetNewFilmByIdFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetNewFilmByIdFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetNewFilmByIdFunctionLogGroup"
      ]
    },
    "CreateNewFilmFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "CreateNewFilmFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateNewFilmFunctionLogGroup"
      ]
    },
    "UpdateNewFilmFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "UpdateNewFilmFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateNewFilmFunctionLogGroup"
      ]
    },
    "DeleteNewFilmFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "DeleteNewFilmFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteNewFilmFunctionLogGroup"
      ]
    },
    "GetNewPeopleFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetNewPeopleFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetNewPeopleFunctionLogGroup"
      ]
    },
    "GetNewPeopleByIdFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetNewPeopleByIdFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetNewPeopleByIdFunctionLogGroup"
      ]
    },
    "CreateNewPeopleFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "CreateNewPeopleFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateNewPeopleFunctionLogGroup"
      ]
    },
    "UpdateNewPeopleFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "UpdateNewPeopleFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateNewPeopleFunctionLogGroup"
      ]
    },
    "DeleteNewPeopleFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "DeleteNewPeopleFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteNewPeopleFunctionLogGroup"
      ]
    },
    "GetOldFilmsFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetOldFilmsFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetOldFilmsFunctionLogGroup"
      ]
    },
    "GetOldFilmsByIdFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetOldFilmsByIdFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetOldFilmsByIdFunctionLogGroup"
      ]
    },
    "GetOldPeopleFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetOldPeopleFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetOldPeopleFunctionLogGroup"
      ]
    },
    "GetOldPeopleByIdFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
          "S3Key": "serverless/serverless-app/dev/1729922221875-2024-10-26T05:57:01.875Z/serverless-app.zip"
        },
        "Handler": "dist/main.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "GetOldPeopleByIdFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAR_WARS_TABLE": "StarWarsEntitiesTable",
            "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetOldPeopleByIdFunctionLogGroup"
      ]
    },
    "GetNewFilmsFunctionLambdaVersionc2fMknmLXiDDp5vCnyzGZMtkkkoH76k1O16JvWuIkk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetNewFilmsFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetNewFilmByIdFunctionLambdaVersion1hiY5gTxm6imt3qtYirQTcFFB59rH9Tt2Wm6jRjU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetNewFilmByIdFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "CreateNewFilmFunctionLambdaVersionncgiIIvypf0dZeLyyKhy4aPuDVuyrmaCADa5xCsCDeI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateNewFilmFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "UpdateNewFilmFunctionLambdaVersionCSkJRTN6tpjAUx7hXHSISot4Nza9KTmlyixeBwKHE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateNewFilmFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "DeleteNewFilmFunctionLambdaVersionFqoFSHGROJvOXTgzylrqMcMGpSOxZSKNEX6tXTPUyE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteNewFilmFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetNewPeopleFunctionLambdaVersionSzlOKoBeIW7vCratUp0ogsYGUuszXnY7YJz2eYOyQoI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetNewPeopleFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetNewPeopleByIdFunctionLambdaVersionMkbasBuB6NPsu06T8SNEUQClTNdOcYLxFo8VqTE8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetNewPeopleByIdFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "CreateNewPeopleFunctionLambdaVersiong9Wn4gPsu8fKAVOYYWmffB7PN7p3XS8JDx4z5OG66o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateNewPeopleFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "UpdateNewPeopleFunctionLambdaVersionOwQ6z3PWXiINDWY9Zig7qf9hrYrXEiJbYochUKFuEA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateNewPeopleFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "DeleteNewPeopleFunctionLambdaVersionarshK5yn2VhuIAcrSgbT06CMGTjHu2UqrVyQDJMM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteNewPeopleFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetOldFilmsFunctionLambdaVersionpG6JfOMNQarLNBAZzF2MPWobUEarCljrBSvTejOMdY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetOldFilmsFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetOldFilmsByIdFunctionLambdaVersioncPjwf0eoLWuCLStOVT4yJkJC2JaEpUVBlIQ0EnLRI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetOldFilmsByIdFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetOldPeopleFunctionLambdaVersion0RMQcrxmSXfZbH7UhChuDeVIWD51YknBXrxkoasE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetOldPeopleFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "GetOldPeopleByIdFunctionLambdaVersionvlK1bqbcL9doWJxz3tWkl04T0EvyPeKJlJO1CHROqbY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetOldPeopleByIdFunctionLambdaFunction"
        },
        "CodeSha256": "/ZewZXzW6Kpm3berR4cS/qDVEbl3uJLbCvbWzYmxp48="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-serverless-app",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "GetNewFilmsFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetNewFilmsFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetNewFilmsFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetNewFilmsFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetNewFilms": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /new/films",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetNewFilmsFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetNewFilmsFunction"
    },
    "GetNewFilmByIdFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetNewFilmByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetNewFilmByIdFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetNewFilmByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetNewFilmsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /new/films/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetNewFilmByIdFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetNewFilmByIdFunction"
    },
    "CreateNewFilmFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateNewFilmFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateNewFilmFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateNewFilmFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostNewFilms": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /new/films",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateNewFilmFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateNewFilmFunction"
    },
    "UpdateNewFilmFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateNewFilmFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateNewFilmFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateNewFilmFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutNewFilmsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /new/films/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateNewFilmFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateNewFilmFunction"
    },
    "DeleteNewFilmFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteNewFilmFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteNewFilmFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteNewFilmFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteNewFilmsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /new/films/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteNewFilmFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteNewFilmFunction"
    },
    "GetNewPeopleFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetNewPeopleFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetNewPeople": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /new/people",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetNewPeopleFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetNewPeopleFunction"
    },
    "GetNewPeopleByIdFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetNewPeopleByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetNewPeopleByIdFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetNewPeopleByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetNewPeopleIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /new/people/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetNewPeopleByIdFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetNewPeopleByIdFunction"
    },
    "CreateNewPeopleFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateNewPeopleFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostNewPeople": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /new/people",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateNewPeopleFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateNewPeopleFunction"
    },
    "UpdateNewPeopleFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateNewPeopleFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutNewPeopleIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /new/people/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateNewPeopleFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateNewPeopleFunction"
    },
    "DeleteNewPeopleFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteNewPeopleFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteNewPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteNewPeopleIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /new/people/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteNewPeopleFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteNewPeopleFunction"
    },
    "GetOldFilmsFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetOldFilmsFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetOldFilmsFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetOldFilmsFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOldFilms": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /old/films",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetOldFilmsFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetOldFilmsFunction"
    },
    "GetOldFilmsByIdFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetOldFilmsByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetOldFilmsByIdFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetOldFilmsByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOldFilmsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /old/films/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetOldFilmsByIdFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetOldFilmsByIdFunction"
    },
    "GetOldPeopleFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetOldPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetOldPeopleFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetOldPeopleFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOldPeople": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /old/people",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetOldPeopleFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetOldPeopleFunction"
    },
    "GetOldPeopleByIdFunctionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetOldPeopleByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetOldPeopleByIdFunction": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetOldPeopleByIdFunctionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOldPeopleIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /old/people/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetOldPeopleByIdFunction"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetOldPeopleByIdFunction"
    },
    "StarWarsEntitiesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "StarWarsEntitiesTable",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "entidad",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "entidad",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "EntidadIndex",
            "KeySchema": [
              {
                "AttributeName": "entidad",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "CounterStarWarsEntitiesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "CounterStarWarsEntitiesTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "entidad",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "entidad",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
      "Export": {
        "Name": "sls-serverless-app-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetNewFilmsFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetNewFilmsFunctionLambdaVersionc2fMknmLXiDDp5vCnyzGZMtkkkoH76k1O16JvWuIkk"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetNewFilmsFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetNewFilmByIdFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetNewFilmByIdFunctionLambdaVersion1hiY5gTxm6imt3qtYirQTcFFB59rH9Tt2Wm6jRjU"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetNewFilmByIdFunctionLambdaFunctionQualifiedArn"
      }
    },
    "CreateNewFilmFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateNewFilmFunctionLambdaVersionncgiIIvypf0dZeLyyKhy4aPuDVuyrmaCADa5xCsCDeI"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-CreateNewFilmFunctionLambdaFunctionQualifiedArn"
      }
    },
    "UpdateNewFilmFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateNewFilmFunctionLambdaVersionCSkJRTN6tpjAUx7hXHSISot4Nza9KTmlyixeBwKHE"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-UpdateNewFilmFunctionLambdaFunctionQualifiedArn"
      }
    },
    "DeleteNewFilmFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteNewFilmFunctionLambdaVersionFqoFSHGROJvOXTgzylrqMcMGpSOxZSKNEX6tXTPUyE"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-DeleteNewFilmFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetNewPeopleFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetNewPeopleFunctionLambdaVersionSzlOKoBeIW7vCratUp0ogsYGUuszXnY7YJz2eYOyQoI"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetNewPeopleFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetNewPeopleByIdFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetNewPeopleByIdFunctionLambdaVersionMkbasBuB6NPsu06T8SNEUQClTNdOcYLxFo8VqTE8"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetNewPeopleByIdFunctionLambdaFunctionQualifiedArn"
      }
    },
    "CreateNewPeopleFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateNewPeopleFunctionLambdaVersiong9Wn4gPsu8fKAVOYYWmffB7PN7p3XS8JDx4z5OG66o"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-CreateNewPeopleFunctionLambdaFunctionQualifiedArn"
      }
    },
    "UpdateNewPeopleFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateNewPeopleFunctionLambdaVersionOwQ6z3PWXiINDWY9Zig7qf9hrYrXEiJbYochUKFuEA"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-UpdateNewPeopleFunctionLambdaFunctionQualifiedArn"
      }
    },
    "DeleteNewPeopleFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteNewPeopleFunctionLambdaVersionarshK5yn2VhuIAcrSgbT06CMGTjHu2UqrVyQDJMM"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-DeleteNewPeopleFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetOldFilmsFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetOldFilmsFunctionLambdaVersionpG6JfOMNQarLNBAZzF2MPWobUEarCljrBSvTejOMdY"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetOldFilmsFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetOldFilmsByIdFunctionLambdaVersioncPjwf0eoLWuCLStOVT4yJkJC2JaEpUVBlIQ0EnLRI"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetOldPeopleFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetOldPeopleFunctionLambdaVersion0RMQcrxmSXfZbH7UhChuDeVIWD51YknBXrxkoasE"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetOldPeopleFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetOldPeopleByIdFunctionLambdaVersionvlK1bqbcL9doWJxz3tWkl04T0EvyPeKJlJO1CHROqbY"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-serverless-app-dev-HttpApiUrl"
      }
    }
  }
}