{
  "C:\\Users\\AlvaroErnestoNarváez\\Desktop\\reto-tecnico\\prueba-tecnica-swapi": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\AlvaroErnestoNarváez\\Desktop\\reto-tecnico\\prueba-tecnica-swapi",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "serverless-app",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "profile": "alvaro",
        "environment": {
          "STAR_WARS_TABLE": "StarWarsEntitiesTable",
          "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": [
              {
                "Fn::GetAtt": [
                  "StarWarsEntitiesTable",
                  "Arn"
                ]
              },
              {
                "Fn::GetAtt": [
                  "CounterStarWarsEntitiesTable",
                  "Arn"
                ]
              },
              {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "StarWarsEntitiesTable",
                        "Arn"
                      ]
                    },
                    "/index/EntidadIndex"
                  ]
                ]
              }
            ]
          }
        ],
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetNewFilmsFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/GetNewFilmsFunction"
              }
            },
            "GetNewFilmByIdFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/GetNewFilmByIdFunction"
              }
            },
            "CreateNewFilmFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/CreateNewFilmFunction"
              }
            },
            "UpdateNewFilmFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/UpdateNewFilmFunction"
              }
            },
            "DeleteNewFilmFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/DeleteNewFilmFunction"
              }
            },
            "GetOldFilmsFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/GetOldFilmsFunction"
              }
            },
            "GetOldFilmsByIdFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/GetOldFilmsByIdFunction"
              }
            },
            "GetOldPeopleFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/GetOldPeopleFunction"
              }
            },
            "GetOldPeopleByIdFunctionLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/GetOldPeopleByIdFunction"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-app",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmsFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmByIdFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewFilmFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewFilmFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewFilmFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsByIdFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleFunction:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleByIdFunction:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmsFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetNewFilmByIdFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CreateNewFilmFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UpdateNewFilmFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeleteNewFilmFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldFilmsByIdFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleFunction:*:*"
                            },
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetOldPeopleByIdFunction:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "StarWarsEntitiesTable",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "CounterStarWarsEntitiesTable",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::Join": [
                                "",
                                [
                                  {
                                    "Fn::GetAtt": [
                                      "StarWarsEntitiesTable",
                                      "Arn"
                                    ]
                                  },
                                  "/index/EntidadIndex"
                                ]
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-app",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetNewFilmsFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "GetNewFilmsFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetNewFilmsFunctionLogGroup"
              ]
            },
            "GetNewFilmByIdFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "GetNewFilmByIdFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetNewFilmByIdFunctionLogGroup"
              ]
            },
            "CreateNewFilmFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "CreateNewFilmFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateNewFilmFunctionLogGroup"
              ]
            },
            "UpdateNewFilmFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "UpdateNewFilmFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateNewFilmFunctionLogGroup"
              ]
            },
            "DeleteNewFilmFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "DeleteNewFilmFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteNewFilmFunctionLogGroup"
              ]
            },
            "GetOldFilmsFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "GetOldFilmsFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOldFilmsFunctionLogGroup"
              ]
            },
            "GetOldFilmsByIdFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "GetOldFilmsByIdFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOldFilmsByIdFunctionLogGroup"
              ]
            },
            "GetOldPeopleFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "GetOldPeopleFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOldPeopleFunctionLogGroup"
              ]
            },
            "GetOldPeopleByIdFunctionLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
                  "S3Key": "serverless/serverless-app/dev/1729851271147-2024-10-25T10:14:31.147Z/serverless-app.zip"
                },
                "Handler": "dist/main.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "GetOldPeopleByIdFunction",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "STAR_WARS_TABLE": "StarWarsEntitiesTable",
                    "COUNTER_TABLE": "CounterStarWarsEntitiesTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOldPeopleByIdFunctionLogGroup"
              ]
            },
            "GetNewFilmsFunctionLambdaVersionPhS6P45b0HV4z9ittNoFUqH1r7Dyp5iajOkah0j0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetNewFilmsFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "GetNewFilmByIdFunctionLambdaVersionHtYkUudlby4xLMZSa2T6m22QG31TtvcAxwXJdjyuQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetNewFilmByIdFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "CreateNewFilmFunctionLambdaVersionA3jKUTtq7lUnq0OMg3LdWSKSGxaoYM5m7SqAT2L31o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateNewFilmFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "UpdateNewFilmFunctionLambdaVersion6IIuc2NnSL7b6rPkBPgnuoCoX4QrEq3hllaUiihHc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateNewFilmFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "DeleteNewFilmFunctionLambdaVersionIkUARWISI918PBK7qZ4L65ChUHBNiRr2KD2cdvnu4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteNewFilmFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "GetOldFilmsFunctionLambdaVersionXobOsvrMhwmYe810ui3fA4thbx6OlLG74IiMGZWQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOldFilmsFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "GetOldFilmsByIdFunctionLambdaVersion6Qk9ekA6e9OvQKBFjvOp23woSM57lsrRHZAPKpGAIM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOldFilmsByIdFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "GetOldPeopleFunctionLambdaVersionR53FxVh5vzqI1AkoozaWxThNR7P8u98xuNu9Fusbm8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOldPeopleFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "GetOldPeopleByIdFunctionLambdaVersioni7KoJhk2BVN0zJKWuJYvOyI5ddfTE2OeFUauxKuYg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOldPeopleByIdFunctionLambdaFunction"
                },
                "CodeSha256": "ntxyrtZLqSZsHR+tGmwihZWkHwA0be5anH8WlFJSuo4="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-serverless-app",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "GetNewFilmsFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetNewFilmsFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetNewFilmsFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetNewFilmsFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetNewFilms": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /new/films",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetNewFilmsFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetNewFilmsFunction"
            },
            "GetNewFilmByIdFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetNewFilmByIdFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetNewFilmByIdFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetNewFilmByIdFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetNewFilmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /new/films/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetNewFilmByIdFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetNewFilmByIdFunction"
            },
            "CreateNewFilmFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateNewFilmFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateNewFilmFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateNewFilmFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostNewFilms": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /new/films",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateNewFilmFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateNewFilmFunction"
            },
            "UpdateNewFilmFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateNewFilmFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateNewFilmFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateNewFilmFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutNewFilmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /new/films/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateNewFilmFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateNewFilmFunction"
            },
            "DeleteNewFilmFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteNewFilmFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteNewFilmFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteNewFilmFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteNewFilmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /new/films/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteNewFilmFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteNewFilmFunction"
            },
            "GetOldFilmsFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOldFilmsFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOldFilmsFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOldFilmsFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetOldFilms": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /old/films",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOldFilmsFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOldFilmsFunction"
            },
            "GetOldFilmsByIdFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOldFilmsByIdFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOldFilmsByIdFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOldFilmsByIdFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetOldFilmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /old/films/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOldFilmsByIdFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOldFilmsByIdFunction"
            },
            "GetOldPeopleFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOldPeopleFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOldPeopleFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOldPeopleFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetOldPeople": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /old/people",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOldPeopleFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOldPeopleFunction"
            },
            "GetOldPeopleByIdFunctionLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOldPeopleByIdFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOldPeopleByIdFunction": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOldPeopleByIdFunctionLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetOldPeopleIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /old/people/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOldPeopleByIdFunction"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOldPeopleByIdFunction"
            },
            "StarWarsEntitiesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "StarWarsEntitiesTable",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "entidad",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "entidad",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "EntidadIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "entidad",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            },
            "CounterStarWarsEntitiesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "CounterStarWarsEntitiesTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "entidad",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "entidad",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
              "Export": {
                "Name": "sls-serverless-app-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetNewFilmsFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetNewFilmsFunctionLambdaVersionPhS6P45b0HV4z9ittNoFUqH1r7Dyp5iajOkah0j0"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-GetNewFilmsFunctionLambdaFunctionQualifiedArn"
              }
            },
            "GetNewFilmByIdFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetNewFilmByIdFunctionLambdaVersionHtYkUudlby4xLMZSa2T6m22QG31TtvcAxwXJdjyuQ"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-GetNewFilmByIdFunctionLambdaFunctionQualifiedArn"
              }
            },
            "CreateNewFilmFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateNewFilmFunctionLambdaVersionA3jKUTtq7lUnq0OMg3LdWSKSGxaoYM5m7SqAT2L31o"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-CreateNewFilmFunctionLambdaFunctionQualifiedArn"
              }
            },
            "UpdateNewFilmFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateNewFilmFunctionLambdaVersion6IIuc2NnSL7b6rPkBPgnuoCoX4QrEq3hllaUiihHc"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-UpdateNewFilmFunctionLambdaFunctionQualifiedArn"
              }
            },
            "DeleteNewFilmFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteNewFilmFunctionLambdaVersionIkUARWISI918PBK7qZ4L65ChUHBNiRr2KD2cdvnu4"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-DeleteNewFilmFunctionLambdaFunctionQualifiedArn"
              }
            },
            "GetOldFilmsFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOldFilmsFunctionLambdaVersionXobOsvrMhwmYe810ui3fA4thbx6OlLG74IiMGZWQ"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-GetOldFilmsFunctionLambdaFunctionQualifiedArn"
              }
            },
            "GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOldFilmsByIdFunctionLambdaVersion6Qk9ekA6e9OvQKBFjvOp23woSM57lsrRHZAPKpGAIM"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn"
              }
            },
            "GetOldPeopleFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOldPeopleFunctionLambdaVersionR53FxVh5vzqI1AkoozaWxThNR7P8u98xuNu9Fusbm8"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-GetOldPeopleFunctionLambdaFunctionQualifiedArn"
              }
            },
            "GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOldPeopleByIdFunctionLambdaVersioni7KoJhk2BVN0zJKWuJYvOyI5ddfTE2OeFUauxKuYg"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-serverless-app-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-app-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "custom": {
        "documentation": {
          "api": {
            "info": {
              "title": "My API",
              "version": "1.0.0",
              "description": "API documentation for my serverless application."
            },
            "paths": {
              "/new/films": {
                "get": {
                  "summary": "Get all custom new films",
                  "description": "Retrieve a list of custom new films.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                },
                "post": {
                  "summary": "Create a custom new film",
                  "description": "Create a custom new film.",
                  "responses": {
                    "201": {
                      "description": "Film created successfully"
                    }
                  }
                }
              },
              "/new/films/{id}": {
                "get": {
                  "summary": "Get a custom new film by its id",
                  "description": "Retrieve a custom new film by its id.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                },
                "put": {
                  "summary": "Update a custom new film",
                  "description": "Update a custom new film.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                },
                "delete": {
                  "summary": "Delete a custom new film",
                  "description": "Delete a custom new film.",
                  "responses": {
                    "204": {
                      "description": "Film deleted successfully"
                    }
                  }
                }
              },
              "/old/films": {
                "get": {
                  "summary": "Get all films from original swapi",
                  "description": "Get all films from original swapi.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                }
              },
              "/old/films/{id}": {
                "get": {
                  "summary": "Get a film from original swapi by its id",
                  "description": "Get a film from original swapi by its id.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                }
              },
              "/old/people": {
                "get": {
                  "summary": "Get all people from original swapi",
                  "description": "Get all people from original swapi.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                }
              },
              "/old/people/{id}": {
                "get": {
                  "summary": "Get people from original swapi by its id",
                  "description": "Get people from original swapi by its id.",
                  "responses": {
                    "200": {
                      "description": "Successful response"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "functions": {
        "GetNewFilmsFunction": {
          "name": "GetNewFilmsFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/new/films",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/new/films"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetNewFilmsFunctionLambdaVersionPhS6P45b0HV4z9ittNoFUqH1r7Dyp5iajOkah0j0"
        },
        "GetNewFilmByIdFunction": {
          "name": "GetNewFilmByIdFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/new/films/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/new/films/{id}"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetNewFilmByIdFunctionLambdaVersionHtYkUudlby4xLMZSa2T6m22QG31TtvcAxwXJdjyuQ"
        },
        "CreateNewFilmFunction": {
          "name": "CreateNewFilmFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/new/films",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/new/films"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateNewFilmFunctionLambdaVersionA3jKUTtq7lUnq0OMg3LdWSKSGxaoYM5m7SqAT2L31o"
        },
        "UpdateNewFilmFunction": {
          "name": "UpdateNewFilmFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/new/films/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/new/films/{id}"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateNewFilmFunctionLambdaVersion6IIuc2NnSL7b6rPkBPgnuoCoX4QrEq3hllaUiihHc"
        },
        "DeleteNewFilmFunction": {
          "name": "DeleteNewFilmFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/new/films/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/new/films/{id}"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteNewFilmFunctionLambdaVersionIkUARWISI918PBK7qZ4L65ChUHBNiRr2KD2cdvnu4"
        },
        "GetOldFilmsFunction": {
          "name": "GetOldFilmsFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/old/films",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/old/films"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetOldFilmsFunctionLambdaVersionXobOsvrMhwmYe810ui3fA4thbx6OlLG74IiMGZWQ"
        },
        "GetOldFilmsByIdFunction": {
          "name": "GetOldFilmsByIdFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/old/films/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/old/films/{id}"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetOldFilmsByIdFunctionLambdaVersion6Qk9ekA6e9OvQKBFjvOp23woSM57lsrRHZAPKpGAIM"
        },
        "GetOldPeopleFunction": {
          "name": "GetOldPeopleFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/old/people",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/old/people"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetOldPeopleFunctionLambdaVersionR53FxVh5vzqI1AkoozaWxThNR7P8u98xuNu9Fusbm8"
        },
        "GetOldPeopleByIdFunction": {
          "name": "GetOldPeopleByIdFunction",
          "handler": "dist/main.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/old/people/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/old/people/{id}"
            }
          ],
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetOldPeopleByIdFunctionLambdaVersioni7KoJhk2BVN0zJKWuJYvOyI5ddfTE2OeFUauxKuYg"
        }
      },
      "resources": {
        "Resources": {
          "StarWarsEntitiesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "StarWarsEntitiesTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "entidad",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "entidad",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EntidadIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "entidad",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "CounterStarWarsEntitiesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "CounterStarWarsEntitiesTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "entidad",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "entidad",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: serverless-app\r\n\r\n# plugins:\r\n#   - serverless-openapi-documentation\r\n#   - serverless-offline\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  profile: alvaro\r\n  environment:\r\n    STAR_WARS_TABLE: StarWarsEntitiesTable\r\n    COUNTER_TABLE: CounterStarWarsEntitiesTable\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource:\r\n        - !GetAtt StarWarsEntitiesTable.Arn\r\n        - !GetAtt CounterStarWarsEntitiesTable.Arn\r\n        - !Join \r\n            - \"\"\r\n            - - !GetAtt StarWarsEntitiesTable.Arn\r\n              - \"/index/EntidadIndex\" \r\n\r\ncustom:\r\n  documentation:\r\n    api:\r\n      info:\r\n        title: My API\r\n        version: '1.0.0'\r\n        description: API documentation for my serverless application.\r\n      paths:\r\n        /new/films:\r\n          get:\r\n            summary: Get all custom new films\r\n            description: Retrieve a list of custom new films.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n          post:\r\n            summary: Create a custom new film\r\n            description: Create a custom new film.\r\n            responses:\r\n              '201':\r\n                description: Film created successfully\r\n        /new/films/{id}:\r\n          get:\r\n            summary: Get a custom new film by its id\r\n            description: Retrieve a custom new film by its id.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n          put:\r\n            summary: Update a custom new film\r\n            description: Update a custom new film.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n          delete:\r\n            summary: Delete a custom new film\r\n            description: Delete a custom new film.\r\n            responses:\r\n              '204':\r\n                description: Film deleted successfully\r\n        /old/films:\r\n          get:\r\n            summary: Get all films from original swapi\r\n            description: Get all films from original swapi.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n        /old/films/{id}:\r\n          get:\r\n            summary: Get a film from original swapi by its id\r\n            description: Get a film from original swapi by its id.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n        /old/people:\r\n          get:\r\n            summary: Get all people from original swapi\r\n            description: Get all people from original swapi.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n        /old/people/{id}:\r\n          get:\r\n            summary: Get people from original swapi by its id\r\n            description: Get people from original swapi by its id.\r\n            responses:\r\n              '200':\r\n                description: Successful response\r\n\r\nfunctions:\r\n  # NEW DATA:\r\n  GetNewFilmsFunction:\r\n    name: GetNewFilmsFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /new/films\r\n          method: get\r\n  GetNewFilmByIdFunction:\r\n    name: GetNewFilmByIdFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /new/films/{id}\r\n          method: get\r\n  CreateNewFilmFunction:\r\n    name: CreateNewFilmFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /new/films\r\n          method: post\r\n  UpdateNewFilmFunction:\r\n    name: UpdateNewFilmFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /new/films/{id}\r\n          method: put\r\n  DeleteNewFilmFunction:\r\n    name: DeleteNewFilmFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /new/films/{id}\r\n          method: delete\r\n  \r\n  # OLD DATA:\r\n  GetOldFilmsFunction:\r\n    name: GetOldFilmsFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /old/films\r\n          method: get\r\n  GetOldFilmsByIdFunction:\r\n    name: GetOldFilmsByIdFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /old/films/{id}\r\n          method: get\r\n  \r\n  GetOldPeopleFunction:\r\n    name: GetOldPeopleFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /old/people\r\n          method: get\r\n  GetOldPeopleByIdFunction:\r\n    name: GetOldPeopleByIdFunction\r\n    handler: dist/main.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /old/people/{id}\r\n          method: get\r\n\r\nresources:\r\n  Resources:\r\n    StarWarsEntitiesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: StarWarsEntitiesTable\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: S\r\n          - AttributeName: entidad\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n          - AttributeName: entidad\r\n            KeyType: RANGE\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: EntidadIndex\r\n            KeySchema:\r\n              - AttributeName: entidad\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n    CounterStarWarsEntitiesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: \"CounterStarWarsEntitiesTable\"\r\n        AttributeDefinitions:\r\n          - AttributeName: entidad\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: entidad\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST",
    "command": [
      "deploy"
    ],
    "options": {
      "verbose": true
    },
    "error": null,
    "params": {},
    "machineId": "0076f8439bc990e2f151dc7b94abcd3a",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "e3869296-956e-4c3d-8d05-a0e9a1908806",
    "orgName": "alvaronarvaez",
    "userId": "nk52l9KMygd6vdj3Rf",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "alvaronarvaez",
    "subscription": null,
    "userEmail": "alvaro.narvaez.salazar96@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "953796120221",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "serverless-app-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:953796120221:stack/serverless-app-dev/462354d0-9234-11ef-b864-0e78da857aef",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:953796120221:stack/serverless-app-dev/462354d0-9234-11ef-b864-0e78da857aef",
    "serviceProviderAwsCfStackCreated": "2024-10-24T18:17:48.551Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-25T10:14:45.347Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:GetOldFilmsByIdFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-GetOldFilmsByIdFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:GetOldPeopleByIdFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-GetOldPeopleByIdFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteNewFilmFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:DeleteNewFilmFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-DeleteNewFilmFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateNewFilmFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:CreateNewFilmFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-CreateNewFilmFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOldPeopleFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:GetOldPeopleFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-GetOldPeopleFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetNewFilmsFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:GetNewFilmsFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-GetNewFilmsFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetNewFilmByIdFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:GetNewFilmByIdFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-GetNewFilmByIdFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "v6vg77yxwi",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-serverless-app-dev-HttpApiId"
      },
      {
        "OutputKey": "UpdateNewFilmFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:UpdateNewFilmFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-UpdateNewFilmFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOldFilmsFunctionLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:953796120221:function:GetOldFilmsFunction:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-app-dev-GetOldFilmsFunctionLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-472d37e3-fbe6",
        "ExportName": "sls-serverless-app-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://v6vg77yxwi.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-serverless-app-dev-HttpApiUrl"
      }
    ]
  }
}